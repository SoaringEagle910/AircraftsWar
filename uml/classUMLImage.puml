@startuml
'https://plantuml.com/class-diagram
abstract class AbstractAircraft{
    # maxHp:int
    # hp:int
    - shootNum:int
    - power:int
    - direction:int
    - bulletSpeed: int
    - strategy: ShootStrategy

    + AbstractAircraft(double locationX, double locationY, double speedX, double speedY, int hp, int shootNum, int power, int direction, int bulletSpeed)
    + getStrategy():ShootStrategy
    + setStrategy(ShootStrategy strategy):void
    + getHp():int
    + decreaseHp(int decrease): void
    + addHp(int hp): void
    + setShootNum(int shootNum): void
    + getShootNum(): int
    + getMaxHp(): int
    + getPower(): int
    + setPower(int power): void
    + getDirection(): int
    + setDirection(int direction): void
    + getBulletspeed(): double
    + setBulletspeed(int bulletspeed): void
    + {abstract}shoot(): List<BaseBullet>
}



abstract class AbstractEnemyAircraft {
  - propSpeedX: int
  - propSpeedY: int

  + AbstractEnemyAircraft(double locationX, double locationY, double speedX, double speedY, int hp, int shootNum, int power, int direction, int bulletSpeed
  + dropProp(): List<BaseProp>
  + shoot(): List<BaseBullet>
  + getScore(): int
}



class Boss {
  - bossMusicThread: AlwaysMusicThread
  - score:int

  + Boss(double locationX, double locationY, double speedX, double speedY, int hp,int shootNum,int power,int direction,int bulletspeed)
  + forward(): void
  + musicStop(): void
  + shoot(): List<BaseBullet>
  + getScore(): int
  + vanish(): void
  + update(int power): void
}


class EliteEnemy{
  - score: int

  + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp,int shootNum,int power,int direction,int bulletspeed)
  + forward(): void
  + shoot(): List<BaseBullet>
  + getScore(): int
  + update(int power): void
}

class ElitePlus{
  - score: int

  + ElitePlus(int locationX, int locationY, int speedX, int speedY, int hp,int shootNum,int power,int direction,int bulletspeed)
  + forward(): void
  + shoot(): List<BaseBullet>
  + getScore(): int
  + update(int power): void
}

class HeroAircraft{
    - {static} myaircraft:HeroAircraft

    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp,int shootNum,int power,int direction,int bulletspeed)
    + forward(): void
    + shoot(): List<BaseBullet>
    + {static} getHeroAircraft():HeroAircraft
}

class MobEnemy{
  - score: int

  + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp,int shootNum,int power,int direction,int bulletspeed)
  + forward(): void
  + shoot(): List<BaseBullet>
  + getScore(): int
  + update(int power): void
}

abstract class AbstractFlyingObject {
  # locationX: double
  # locationY: double
  # speedX: double
  # speedY: double
  # image: BufferedImage
  # width: int
  # height: int
  # isValid: boolean

  + AbstractFlyingObject():void
  + AbstractFlyingObject(double locationX, double locationY, double speedX, double speedY)
  + forward(): void
  + crash(AbstractFlyingObject flyingObject): boolean
  + getLocationX(): double
  + getLocationY(): double
  + setLocation(double locationX, double locationY): void
  + getSpeedY(): double
  + getImage(): BufferedImage
  + getWidth(): int
  + getHeight(): int
  + notValid(): boolean
  + vanish(): void
}

class BaseBullet{
  - power: int

  + BaseBullet(double locationX, double locationY, double speedX, double speedY, int power)
  + forward(): void
  + getPower(): int
  + update(int power): void
}

class EnemyBullet{
    + EnemyBullet(double locationX, double locationY, double speedX, double speedY, int power)
    + update(int power):void
}

class HeroBullet{
    + HeroBullet(double locationX, double locationY, double speedX, double speedY, int power)
}


class BossAircraftCreator{
    +Create():Boss
}
class EliteAircraftCreator{
    +Create():EliteEnemy
}
class ElitePlusAircraftCreator{
    +Create():ElitePlus
}
interface EnemyAircraftCreator{
    +Create():AbstractEnemyAircraft
}
class MobAircraftCreator{
    +Create():MobEnemy
}



class ArcBulletProp{
    + ArcBulletProp(int locationX, int locationY, int speedX, int speedY)
    + valid():void
}
abstract class BaseProp{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} valid():void
    + getSupplyMusic():void
}
class BloodProp{
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + valid():void
}
class BombProp{
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + valid():void
}
class BombValid {
  - {static} bombObservers: List<PropObserver>

  + {static} getBombObservers(): List<PropObserver>
  + {static} addObserver(bombObserver: PropObserver): void
  + {static} removeObserver(bombObserver: PropObserver): void
  + {static} nodifyAll(power: int): void
  + {static} bombWork(power: int): void
}
class CircleBulletProp{
    + CircleBulletProp(int locationX, int locationY, int speedX, int speedY)
    + valid():void
}
interface PropObserver{
    + update(int power):void
}




class ArcBulletPropCreator{
    + Create(int locationX,int locationY,int propSpeedX,int propSpeedY)
}
class BloodPropCreator{
    + Create(int locationX,int locationY,int propSpeedX,int propSpeedY)
}
class BombPropCreator{
    + Create(int locationX,int locationY,int propSpeedX,int propSpeedY)
}
class CircleBulletPropCreator{
    + Create(int locationX,int locationY,int propSpeedX,int propSpeedY)
}
interface PropCreator{
    + Create(int locationX,int locationY,int propSpeedX,int propSpeedY)
}



class Record {
  - rank: int
  - name: String
  - mark: int
  - time: LocalDateTime

  + Record(int rank,String name,int mark,LocalDateTime time)
  + getRank(): int
  + setRank(rank: int): void
  + getName(): String
  + setName(name: String): void
  + getMark(): int
  + setMark(mark: int): void
  + getTime(): LocalDateTime
  + setTime(time: LocalDateTime): void
}
interface RecordDao{
    + getAllRecord():List<Record>
    + doAdd(Record record):void
}
class RecordDaoImpl{
    - records:List<Record>
    + RecordDaoImpl()
    + getAllRecord():List<Record>
    + doAdd(Record record):void
}
class ShowScoreBoard {
  - {static} records: ArrayList<Record>
  + {static} getRecordSize(): int
  + {static} getRecords(): ArrayList<Record>
  + {static} show(): void
  + {static} addOne(name: String, mark: int): void
  + {static} deleteOne(index: int): void
}



class arcShoot{
    + ShootAction(AbstractAircraft aircraft):List<BaseBullet>
}
class circleShoot{
    + ShootAction(AbstractAircraft aircraft):List<BaseBullet>
}
interface ShootStrategy{
    + ShootAction(AbstractAircraft aircraft):List<BaseBullet>
}
class straightShoot{
    + ShootAction(AbstractAircraft aircraft):List<BaseBullet>
}



@enduml