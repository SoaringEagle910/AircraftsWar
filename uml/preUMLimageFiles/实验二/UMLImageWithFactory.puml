@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
 }

abstract class AbstractEnemyAircraft
{
    + {abstract} shoot():List<BaseBullet>
}
AbstractAircraft <|-- AbstractEnemyAircraft

class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:
    - {static} myaircraft:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + {static} getHeroAircraft():HeroAircraft
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractEnemyAircraft <|-- MobEnemy

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + dropProp():int
}
AbstractEnemyAircraft <|-- EliteEnemy



interface EnemyAircraftCreator{
    + Create():AbstractEnemyAircraft
}

class MobAircraftCreator{
    + Create():AbstractEnemyAircraft
}
EnemyAircraftCreator <|.. MobAircraftCreator

class EliteAircraftCreator{
    + Create():AbstractEnemyAircraft
}
EnemyAircraftCreator <|.. EliteAircraftCreator

MobAircraftCreator ..> MobEnemy
EliteAircraftCreator ..> EliteEnemy




abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
}

class BloodProp
{
    - Blood:int
    + BloodProp(int locationX, int locationY,int speedX, int speedY)
    + AddBlood():int
}
class BombProp
{
    - power:int
    + BombProp(int locationX, int locationY,int speedX, int speedY)
    + Bomb():int
}
class BulletProp
{
    - number:int
    + BulletProp(int locationX, int locationY,int speedX, int speedY)
    + AddBullet():int
}
BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp



interface PropCreator
{
    + Create():BaseProp
}
class BloodPropCreator
{
    +Create():BaseProp
}
class BombPropCreator
{
    +Create():BaseProp
}
class BulletPropCreator
{
    +Create():BaseProp
}
PropCreator <|.. BloodPropCreator
PropCreator <|.. BombPropCreator
PropCreator <|.. BulletPropCreator

BloodPropCreator ..> BloodProp
BombPropCreator ..> BombProp
BulletPropCreator ..> BulletProp



AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml